version: '3'

services:
  redis:
    container_name: redaudioapi-redis
    hostname: redis
    command: ["--appendonly", "yes",
              "--maxmemory", "2g",
              "--maxmemory-policy","allkeys-lru",
              "--loadmodule", "/usr/lib/redis/modules/redisai.so",
              "--loadmodule", "/usr/lib/redis/modules/redisearch.so",
              "--loadmodule", "/usr/lib/redis/modules/redisgraph.so",
              "--loadmodule", "/usr/lib/redis/modules/redistimeseries.so",
              "--loadmodule", "/usr/lib/redis/modules/rejson.so",
              "--loadmodule", "/usr/lib/redis/modules/redisbloom.so",
              "--loadmodule", "/var/opt/redislabs/lib/modules/redisgears.so",
              "PythonHomeDir", "/opt/redislabs/lib/modules/python3"]
    env_file:
      - .env
    networks:
      - redaudioapi-net
    image: redislabs/redismod
    volumes:
      - ./data/redis:/data
    restart: unless-stopped

  postgres:
    container_name: redaudioapi-postgres
    image: postgres:12.0
    env_file:
      - .env
    volumes:
      - ./data/postgres:/data/postgres
    networks:
      - redaudioapi-net
    restart: unless-stopped

  pgadmin:
    container_name: redaudioapi-pgadmin
    image: dpage/pgadmin4:latest
    env_file:
      - .env
    volumes:
       - ./data/pgadmin:/root/.pgadmin
    ports:
      - 5050:5050
    networks:
      - redaudioapi-net
    restart: unless-stopped

  api:
    container_name: redaudioapi-api
    image: drapersniper/redbot-global-api:latest
#    image: test
    env_file:
      - .env
    environment:
      RED_API_DATABASE: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@redaudioapi-postgres/${POSTGRES_DB}
      REDIS_CACHED_DATA: redis://redaudioapi-redis
    networks:
      - redaudioapi-net
    depends_on:
      - postgres
      - redis
    ports:
      - 8000:8000
    restart: unless-stopped
    links:
      - redis
      - postgres
#  portainer:
#    container_name: redaudioapi-portainer
#    image: portainer/portainer
#    command: -H unix:///var/run/docker.sock
#    restart: always
#    ports:
#      - 9000:9000
#    volumes:
#      - /var/run/docker.sock:/var/run/docker.sock
#      - ./data/portainer:/data
  pgbackup:
    container_name: redaudioapi-pgbackup
    image: kartoza/pg-backup:9.6
    hostname: redaudioapi-pgbackup
    env_file:
      - .env
    depends_on:
      - postgres
    volumes:
      - ./data/backups:/backups
    links:
      - postgres:postgres
    environment:
      - POSTGRES_HOST=redaudioapi-postgres

networks:
  redaudioapi-net:
    driver: bridge
